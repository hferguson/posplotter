import React, {useEffect, useState} from "react";
import axios from 'axios';
import {Alert} from 'react-bootstrap';
import ReportMap from './components/ReportMap';
import ReportDetails from './components/ReportDetails';
import ReportEditor from './components/ReportEditor';
import AddressListDlg from './components/AddressListDlg';
import {getCentrePoint} from './utils/wpfunctions.js';
import 'bootstrap/dist/css/bootstrap.min.css';
import './App.css';

// 45.4253° N, 75.6829° W


function App() {
  const [mapaddrs,setMapAddrs] = useState([]);    // Addresses found when user clicks on map
  const [waypoints, setWaypoints] = useState([]); // waypoints already stored in bylaw db
  const [mapCtr, setMapCtr] = useState({          // calculated map center - defaults to Sandy Hill
    lat: 45.4253,
    lon: -75.6829
  });
  const [selMapAddr,setSelMapAddr] = useState(null); // Map address from reverse lookup that user
                                                      // indicated is the address of the incident they 
                                                      // want to report
  const [selWP, setSelWP] = useState(null);   // currently selected waypoint to display details about
  const [dlgMsg, setDlgMsg] = useState({
      message: '',
      ok: true
  });   // message to be rendered to dialog - if message is empty, no dialog is rendered
  const [dlgDismissed, setDlgDismissed] = useState(false);
  const setErrorMsg = (msg) => {
    //console.log(`Err msg: ${msg}`);
    setDlgMsg({message: msg, ok: false});
    //getWaypoints();
  }

  const setOKMsg = (msg) => {
    //console.log(`OK msg: ${msg}`);
    setDlgMsg({message: msg, ok: true});
    //getWaypoints();
  }

  const getWaypoints = () => {
    axios
      .get('/api/reports')
      .then((res) => {
          //console.log(res);
          console.log('setting waypoints');
          setMapCtr(getCentrePoint(res.data));
          setWaypoints(res.data);
      })
      .catch((err)  => console.log(err));
  }
  const selectAddressForRpt = (address) => {
      //console.log(address);
      setMapAddrs([]);  // get rid of list
      setSelMapAddr(address); // set selected address in state to be passed into editor
  }

  useEffect(() => {
    console.log("Initialization of waypoints");
    getWaypoints();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  useEffect(() => {
    
    if (dlgDismissed) {
      console.log("dlg closed");
      getWaypoints();
      setDlgDismissed(false);
    }
      
  }, [dlgDismissed]);
  
  // When user selects a waypoint, check if there are duplicates
  useEffect(() => {
    if (selWP == null)
      return;
    
  }, [selWP])
  return (
    
    <div className="App">
        <h1>Sandy Hill Bylaw Reports</h1>
          <h5>plot locations of noise complaints in your neighbourhood and see where else people are 
              having issues
          </h5>
          {/* 
              + added transition={} null to get around a warning being generated by bootstrap
              + changed onClose from {setDlgMsg to {() =>setDlgMsg() to stop endless loop. See
                https://stackoverflow.com/questions/59304283/error-too-many-re-renders-react-limits-the-number-of-renders-to-prevent-an-in?rq=1
          */}
          <Alert show={dlgMsg.message.length > 0} 
                  transition={null} 
                  variant={dlgMsg.ok ? 'success' : 'danger'} 
                  onClose={(() => {
                                    setDlgMsg({message: '', ok : true}); 
                                    setDlgDismissed(true)})
                                  }  
                  dismissible >
            <p>{dlgMsg.message}</p>
          </Alert>

       
         {dlgMsg.message.length > 0 && console.log(`Msg is ${dlgMsg.message}`) }
        <div className="AppComponents">
          <ReportDetails report={selWP} />
          <ReportMap centre={mapCtr} waypoints={waypoints} selectedWP={selWP} setWaypoint={setSelWP} setAddresses={setMapAddrs}/>
        </div>
        <ReportEditor handleOKMsg={setOKMsg} handleErrMsg={setErrorMsg} resetAddress={setSelMapAddr} prefilAddress={selMapAddr}/>
        <AddressListDlg addresses={mapaddrs} addressHandler={selectAddressForRpt} />
        <p>An experiment from Hugh Ferguson Consulting Ltd.</p>
        <p>React version: {React.version}</p>
    </div>
    
  );
}

export default App;
